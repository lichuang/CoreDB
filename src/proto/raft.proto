syntax = "proto3";

// A quorum granted or not granted Leader.
message LeaderId {
  uint64 term = 1;
  uint64 node_id = 2;
}

// The vote for RequestVote etc.
message Vote {
  uint64 term = 1;
  uint64 node_id = 2;
  bool committed = 3;
}

message Empty {}

message RaftRequest {
  string data = 1;
}

message RaftReply {
  string data = 1;
  string error = 2;
}

message KVMeta {
  // Expiration time in **seconds or milliseconds** since Unix epoch (1970-01-01).
  //
  // The interpretation depends on the magnitude of the value:
  // - Values > `1_000_000_000_000`: treated as milliseconds since epoch
  // - Values â‰¤ `1_000_000_000_000`: treated as seconds since epoch
  optional uint64 expire_at = 1;

  // The propose timestamp in milliseconds since epoch (1970-01-01).
  optional uint64 proposed_at_ms = 2;
}

message SeqV {
  uint64 seq = 1;
  bytes data = 2;
  optional KVMeta meta = 3;
}

// Item for a Streaming read reply, e.g., for `Mget` and `List`.
message StreamItem {
  string key = 1;
  optional SeqV value = 2;
}

service RaftService {

  // Forward a request to another node.
  rpc Forward(RaftRequest) returns (RaftReply);

  // Handling internally redirected KvReadV1 request.
  // Without checking token.
  rpc KvRead(RaftRequest) returns (stream StreamItem);

  // raft RPC

  rpc AppendEntries(RaftRequest) returns (RaftReply);

  // Added in 1.2.547, 2024-06-27
  //rpc InstallSnapshotV003(stream SnapshotChunkRequestV003) returns (SnapshotResponseV003);

  // Stream-based snapshot installation with entry-by-entry transmission
  //rpc InstallSnapshotV004(stream InstallEntryV004) returns (InstallSnapshotResponseV004);

  //rpc Vote(RaftRequest) returns (RaftReply);

  //rpc VoteV001(VoteRequest) returns (VoteResponse);

  //rpc TransferLeader(TransferLeaderRequest) returns (Empty);
}